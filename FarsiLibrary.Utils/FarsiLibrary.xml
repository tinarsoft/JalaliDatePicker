<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FarsiLibrary.Utils</name>
    </assembly>
    <members>
        <member name="T:FarsiLibrary.Utils.PersianCalendar">
            <summary>
            PersianCalendar calendar. Persian calendar, also named Jalaali calendar, was first based on Solar year by Omar Khayyam, the great Iranian poet, astrologer and scientist.
            Jalaali calendar is approximately 365 days. Each of the first six months in the Jalaali calendar has 31 days, each of the next five months has 30 days, and the last month has 29 days in a common year and 30 days in a leap year. A leap year is a year that, when divided by 33, has a remainder of 1, 5, 9, 13, 17, 22, 26, or 30. For example, the year 1370 is a leap year because dividing it by 33 yields a remainder of 17. There are approximately 8 leap years in every 33 year cycle.
            </summary>
        </member>
        <member name="F:FarsiLibrary.Utils.PersianCalendar.PersianEra">
            <summary>
            Represents the current era.
            </summary>
            <remarks>The Persian calendar recognizes only A.P (Anno Persarum) era.</remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.AddMonths(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of months away from the specified DateTime.
            </summary>
            <param name="time">The DateTime instance to add.</param>
            <param name="months">The number of months to add.</param>
            <returns>The DateTime that results from adding the specified number of months to the specified DateTime.</returns>
            <remarks>
            The year part of the resulting DateTime is affected if the resulting month is beyond the last month of the current year. The day part of the resulting DateTime is also affected if the resulting day is not a valid day in the resulting month of the resulting year; it is changed to the last valid day in the resulting month of the resulting year. The time-of-day part of the resulting DateTime remains the same as the specified DateTime.
            
            For example, if the specified month is Ordibehesht, which is the 2nd month and has 31 days, the specified day is the 31th day of that month, and the value of the months parameter is -3, the resulting year is one less than the specified year, the resulting month is Bahman, and the resulting day is the 30th day, which is the last day in Bahman.
            
            If the value of the months parameter is negative, the resulting DateTime would be earlier than the specified DateTime.
            </remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.AddYears(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of years away from the specified DateTime.
            </summary>
            <param name="time">The DateTime instance to add.</param>
            <param name="years">The number of years to add.</param>
            <returns>The DateTime that results from adding the specified number of years to the specified DateTime.</returns>
            <remarks>
            The day part of the resulting DateTime is affected if the resulting day is not a valid day in the resulting month of the resulting year; it is changed to the last valid day in the resulting month of the resulting year. The time-of-day part of the resulting DateTime remains the same as the specified DateTime.
            
            For example, Esfand has 29 days, except during leap years when it has 30 days. If the specified Date is the 30th day of Esfand in a leap year and the value of years is 1, the resulting Date will be the 29th day of Esfand in the following year.
            
            If years is negative, the resulting DateTime would be earlier than the specified DateTime.
            </remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetDayOfMonth(System.DateTime)">
            <summary>
            Gets the day of the month in the specified DateTime.
            </summary>
            <param name="time">The DateTime instance to read.</param>
            <returns>An integer from 1 to 31 that represents the day of the month in time.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetDayOfWeek(System.DateTime)">
            <summary>
            Gets the day of the week in the specified DateTime.
            </summary>
            <param name="time">The DateTime instance to read.</param>
            <returns>A DayOfWeek value that represents the day of the week in time.</returns>
            <remarks>The DayOfWeek values are Sunday which indicates YekShanbe', Monday which indicates DoShanbe', Tuesday which indicates SeShanbe', Wednesday which indicates ChaharShanbe', Thursday which indicates PanjShanbe', Friday which indicates Jom'e, and Saturday which indicates Shanbe'.</remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetDayOfYear(System.DateTime)">
            <summary>
            Gets the day of the year in the specified DateTime.
            </summary>
            <param name="time">The DateTime instance to read.</param>
            <returns>An integer from 1 to 366 that represents the day of the year in time.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the number of days in the specified month.
            </summary>
            <param name="year">An integer that represents the year.</param>
            <param name="month">An integer that represents the month.</param>
            <param name="era">An integer that represents the era.</param>
            <returns>The number of days in the specified month in the specified year in the specified era.</returns>
            <remarks>For example, this method might return 29 or 30 for Esfand (month = 12), depending on whether year is a leap year.</remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetDaysInYear(System.Int32,System.Int32)">
            <summary>
            Gets the number of days in the year specified by the year and era parameters.
            </summary>
            <param name="year">An integer that represents the year.</param>
            <param name="era">An integer that represents the era.</param>
            <returns>The number of days in the specified year in the specified era.</returns>
            <remarks>For example, this method might return 365 or 366, depending on whether year is a leap year.</remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetEra(System.DateTime)">
            <summary>
            Gets the era in the specified DateTime.
            </summary>
            <param name="time">The DateTime instance to read.</param>
            <returns>An integer that represents the era in time.</returns>
            <remarks>The Persian calendar recognizes one era: A.P. (Latin "Anno Persarum", which means "the year of/for Persians").</remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetMonth(System.DateTime)">
            <summary>
            Gets the month in the specified DateTime.
            </summary>
            <param name="time">The DateTime instance to read.</param>
            <returns>An integer between 1 and 12 that represents the month in time.</returns>
            <remarks>Month 1 indicates Farvardin, month 2 indicates Ordibehesht, month 3 indicates Khordad, month 4 indicates Tir, month 5 indicates Amordad, month 6 indicates Shahrivar, month 7 indicates Mehr, month 8 indicates Aban, month 9 indicates Azar, month 10 indicates Dey, month 11 indicates Bahman, and month 12 indicates Esfand.</remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
            <summary>
            Gets the number of months in the year specified by the year and era parameters.
            </summary>
            <param name="year">An integer that represents the year.</param>
            <param name="era">An integer that represents the era.</param>
            <returns>The number of months in the specified year in the specified era.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetYear(System.DateTime)">
            <summary>
            Gets the year in the specified DateTime.
            </summary>
            <param name="time">The DateTime instance to read.</param>
            <returns>An integer between 1 and 9378 that represents the year in time.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the Date specified by the year, month, day, and era parameters is a leap day.
            </summary>
            <param name="year">An integer that represents the year.</param>
            <param name="month">An integer that represents the month.</param>
            <param name="day">An integer that represents the day.</param>
            <param name="era">An integer that represents the era.</param>
            <returns>true if the specified day is a leap day; otherwise, false.</returns>
            <remarks>
            In the Persian calendar leap years are applied every 4 or 5 years according to a certain pattern that iterates in a 2820-year cycle. A common year has 365 days and a leap year has 366 days.
            
            A leap day is a day that occurs only in a leap year. In the Persian calendar, the 30th day of Esfand (month 12) is the only leap day.
            </remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the month specified by the year, month, and era parameters is a leap month.
            </summary>
            <param name="year">An integer that represents the year.</param>
            <param name="month">An integer that represents the month.</param>
            <param name="era">An integer that represents the era.</param>
            <returns>This method always returns false, unless overridden by a derived class.</returns>
            <remarks>
            In the Persian calendar leap years are applied every 4 or 5 years according to a certain pattern that iterates in a 2820-year cycle. A common year has 365 days and a leap year has 366 days.
            
            A leap month is an entire month that occurs only in a leap year. The Persian calendar does not have any leap months.
            </remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.IsLeapYear(System.Int32,System.Int32)">
            <summary>
            Determines whether the year specified by the year and era parameters is a leap year.
            </summary>
            <param name="year">An integer that represents the year.</param>
            <param name="era">An integer that represents the era.</param>
            <returns>true if the specified year is a leap year; otherwise, false.</returns>
            <remarks>In the Persian calendar leap years are applied every 4 or 5 years according to a certain pattern that iterates in a 2820-year cycle. A common year has 365 days and a leap year has 366 days.</remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a DateTime that is set to the specified Date and time in the specified era.
            </summary>
            <param name="year">An integer that represents the year.</param>
            <param name="month">An integer that represents the month.</param>
            <param name="day">An integer that represents the day.</param>
            <param name="hour">An integer that represents the hour.</param>
            <param name="minute">An integer that represents the minute.</param>
            <param name="second">An integer that represents the second.</param>
            <param name="millisecond">An integer that represents the millisecond.</param>
            <param name="era">An integer that represents the era.</param>
            <returns>The DateTime instance set to the specified Date and time in the current era.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.ToFourDigitYear(System.Int32)">
            <summary>
            Converts the specified two-digit year to a four-digit year by using the Globalization.PersianCalendar.TwoDigitYearMax property to determine the appropriate century.
            </summary>
            <param name="year">A two-digit integer that represents the year to convert.</param>
            <returns>An integer that contains the four-digit representation of year.</returns>
            <remarks>TwoDigitYearMax is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the two-digit year within that 100-year range. For example, if TwoDigitYearMax is set to 1429, the 100-year range is from 1330 to 1429; therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.</remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.GetCentury(System.DateTime)">
            <summary>
            Gets the century of the specified DateTime.
            </summary>
            <param name="time">An instance of the DateTime class to read.</param>
            <returns>An integer from 1 to 94 that represents the century.</returns>
            <remarks>A century is a whole 100-year period. So the century 14 for example, represents years 1301 through 1400.</remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianCalendar.NumberOfLeapYearsUntil(System.Int32)">
            <summary>
            Calculates the number of leap years until -but not including- the specified year.
            </summary>
            <param name="year">An integer between 1 and 9378</param>
            <returns>An integer representing the number of leap years that have occured by the year specified.</returns>
            <remarks>In the Persian calendar leap years are applied every 4 or 5 years according to a certain pattern that iterates in a 2820-year cycle. A common year has 365 days and a leap year has 366 days.</remarks>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianCalendar.Eras">
            <summary>
            Gets the list of eras in the PersianCalendar.
            </summary>
            <remarks>The Persian calendar recognizes one era: A.P. (Latin "Anno Persarum", which means "the year of/for Persians").</remarks>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianCalendar.TwoDigitYearMax">
            <summary>
            Gets and sets the last year of a 100-year range that can be represented by a 2-digit year.
            </summary>
            <property_value>The last year of a 100-year range that can be represented by a 2-digit year.</property_value>
            <remarks>This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 1429, the 100-year range is from 1330 to 1429; therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.</remarks>
        </member>
        <member name="T:FarsiLibrary.Utils.PersianDate">
            <summary>
            PersianDate class to work with dates in Jalali calendar transparently.
            <example>An example on how to convert current System.DateTime to PersianDate.
            <code>
            	class MyClass 
                {
            	   public static void Main() 
                   {
            	      Console.WriteLine("Current Persian Date Is : " + PersianDate.Now.ToString());
            	   }
            	}
            </code>
            You can alternatively create a specified date/time based on specific <c>DateTime</c> value. To do this
            you need to use <value>PersianDateConverter</value> class.
            </example>
            <seealso cref="T:FarsiLibrary.Utils.PersianDateConverter"/>
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.#cctor">
            <summary>
            Static constructor initializes Now property of PersianDate and Min/Max values.
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a PersianDate instance with values provided in datetime string. Set <c>includestime</c> to <code>true</code> 
            if datetime string is in 'yyyy/mm/dd hh:mm:ss' format. You can only include date part e.g. 'yyyy/mm/dd' in datetime,
            but you should set <c>includesTime</c> to false if so.
            </summary>
            <exception cref="T:FarsiLibrary.Utils.InvalidPersianDateException"></exception>
            <param name="datetime"></param>
            <param name="includesTime"></param>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a PersianDate instance with values provided in datetime string. Set <c>includestime</c> to <code>true</code> 
            if datetime string is in 'yyyy/mm/dd hh:mm:ss' format. You can only include date part e.g. 'yyyy/mm/dd' in datetime,
            but you should set <c>includesTime</c> to false if so. Also you can construct an instance with time formatted as 'hh:mm'. for tis you have to
            set <c>includestime</c> to <code>true</code> and Set <c>includesSecond</c> to <code>false</code>.
            </summary>
            <param name="datetime"></param>
            <param name="includesTime"></param>
            <param name="includesSecond"></param>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.#ctor(System.String,System.TimeSpan)">
            <summary>
            Constructs a PersianDate instance with values provided in datetime string. You should
            include Date part only in <c>Date</c> and set the Time of the instance as a <c>TimeSpan</c>.
            </summary>
            <exception cref="T:FarsiLibrary.Utils.InvalidPersianDateException"></exception>
            <param name="Date"></param>
            <param name="TimeOfDay"></param>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.#ctor(System.String)">
            <summary>
            Constructs a PersianDate instance with values provided as a string. The provided string should be in format 'yyyy/mm/dd'.
            </summary>
            <exception cref="T:FarsiLibrary.Utils.InvalidPersianDateException"></exception>
            <param name="Date"></param>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a PersianDate instance with values specified as <c>Integer</c>.
            </summary>
            <exception cref="T:FarsiLibrary.Utils.InvalidPersianDateException"></exception>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a PersianDate instance with values specified as <c>Integer</c>. Time value of this instance is set to <c>DateTime.Now</c>.
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.toDouble(System.Int32)">
            <summary>
            Adds to single day or months a preceding zero
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.ToWritten">
            <summary>
            Returns a string representation of current PersianDate value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.Parse(System.String,System.Boolean)">
            <summary>
            Parse a string value into a PersianDate instance. Value could be either in 'yyyy/mm/dd hh:mm:ss' or 'yyyy/mm/dd' formats. If you want to parse <c>Time</c> value too,
            you should set <c>includesTime</c> to <c>true</c>.
            </summary>
            <exception cref="T:FarsiLibrary.Utils.InvalidPersianDateException"></exception>
            <param name="value"></param>
            <param name="includesTime"></param>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.Parse(System.String,System.Boolean,System.Boolean)">
            <summary>
            Parse a string value into a PersianDate instance. Value could be either in 'yyyy/mm/dd hh:mm:ss' or 'yyyy/mm/dd' formats. If you want to parse <c>Time</c> value too,
            you should set <c>includesTime</c> to <c>true</c>.
            </summary>
            <exception cref="T:FarsiLibrary.Utils.InvalidPersianDateException"></exception>
            <param name="value"></param>
            <param name="includesTime"></param>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.Parse(System.String)">
            <summary>
            Parse a string value into a PersianDate instance. Value can only be in 'yyyy/mm/dd' format.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.ToString">
            <summary>
            Returns Date in 'yyyy/mm/dd' string format.
            </summary>
            <returns>string representation of evaluated Date.</returns>
            <example>An example on how to get the written form of a Date.
            <code>
            	class MyClass {
            	   public static void Main()
            	   {	
            			Console.WriteLine(PersianDate.Now.ToString());
            	   }
            	}
            </code>
            </example>
            <seealso cref="M:FarsiLibrary.Utils.PersianDate.ToWritten"/>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.ToString(System.Boolean)">
            <summary>
            Returns Date in either 'yyyy/mm/dd' or 'yyyy/mm/dd hh:mm:ss' format, depending on <c>includeTime</c> value.
            </summary>
            <param name="includeTime">If true, output will contain both date and time value</param>
            <returns>string representation of evaluated Date.</returns>
            <example>An example on how to get the written form of a Date.
            <code>
            	class MyClass {
            	   public static void Main()
            	   {	
            			Console.WriteLine(PersianDate.Now.ToString(true));
            	   }
            	}
            </code>
            </example>
            <seealso cref="M:FarsiLibrary.Utils.PersianDate.ToWritten"/>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDate.ToString(System.Boolean,System.Boolean)">
            <summary>
            Returns Date in either 'yyyy/mm/dd', 'yyyy/mm/dd hh:mm:ss' or 'yyyy/mm/dd hh:mm' format, depending on <c>includeTime</c> and <c>includeSecond</c> values.
            </summary>
            <param name="includeTime">If includeTime and includeSecond true, output will contain time in hh:mm:ss format, but if includesTime is true and includesScond is false the returning format will be hh:mm</param>
            <returns>string representation of evaluated Date.</returns>
            <example>An example on how to get the written form of a Date.
            <code>
            	class MyClass {
            	   public static void Main()
            	   {	
            			Console.WriteLine(PersianDate.Now.ToString(true, true));
            	   }
            	}
            </code>
            </example>
            <seealso cref="M:FarsiLibrary.Utils.PersianDate.ToWritten"/>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.Now">
            <summary>
            Current date/time in PersianDate format.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.Year">
            <summary>
            Year value of PersianDate.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.Month">
            <summary>
            Month value of PersianDate.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.Day">
            <summary>
            Day value of PersianDate.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.Hour">
            <summary>
            Hour value of PersianDate.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.Minute">
            <summary>
            Minute value of PersianDate.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.Second">
            <summary>
            Second value of PersianDate.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.Time">
            <summary>
            Time value of PersianDate in TimeSpan format.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.LocalizedMonthName">
            <summary>
            Localized name of PersianDate months.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.LocalizedWeekDayName">
            <summary>
            Weekday names of this instance in localized format.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDate.MonthDays">
            <summary>
            Number of days in this month.
            </summary>
        </member>
        <member name="T:FarsiLibrary.Utils.Helpers.WeakDictionary">
            <summary>
            A dictionary implementation where the key objects may be garbage collected. When a key is garbage collected 
            its entry will be removed from WeakDictionary.
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakDictionary.Add(System.Object,System.Object)">
            <summary>
            implemtentation of IDictionary.Add
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakDictionary.Remove(System.Object)">
            <summary>
            implemtentation of IDictionary.Remove
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakDictionary.Clear">
            <summary>
            implemtentation of IDictionary.Clear
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakDictionary.Contains(System.Object)">
            <summary>
            implemtentation of IDictionary.Contains
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakDictionary.GetEnumerator">
            <summary>
            implemtentation of IDictionary.GetEnumerator
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            implemtentation of IDictionary.CopyTo
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakDictionary.Count">
            <summary>
            implemtentation of IDictionary.Count
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakDictionary.IsSynchronized">
            <summary>
            implemtentation of IDictionary.IsSynchronized
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakDictionary.IsFixedSize">
            <summary>
            implemtentation of IDictionary.IsFixedSize
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakDictionary.SyncRoot">
            <summary>
            implemtentation of IDictionary.SyncRoot
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakDictionary.IsReadOnly">
            <summary>
            implemtentation of IDictionary.IsReadOnly
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakDictionary.Keys">
            <summary>
            implemtentation of IDictionary.Keys
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakDictionary.Values">
            <summary>
            implemtentation of IDictionary.Values
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakDictionary.Item(System.Object)">
            <summary>
            implemtentation of IDictionary indexer
            </summary>
        </member>
        <member name="T:FarsiLibrary.Utils.PersianDateConverter">
            <summary>Class to convert PersianDate into normal DateTime value and vice versa.
            <seealso cref="T:FarsiLibrary.Utils.PersianDate"/>
            </summary>
            <remarks>
            You can use <c>FarsiLibrary.Utils.FarsiDate.Now</c> property to access current Date.
            </remarks>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.JLeap(System.Int32)">
            <summary>
            Checks if a specified Persian year is a leap one.
            </summary>
            <param name="iJYear"></param>
            <returns>returns 1 if the year is leap, otherwise returns 0.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.GLeap(System.Int32)">
            <summary>
            Checks if a specified Gregorian year is a leap one.
            </summary>
            <param name="GregYear"></param>
            <returns>returns 1 if the year is leap, otherwise returns 0.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.ToPersianDate(System.DateTime)">
            <overloads>Has two overloads.</overloads>
            <summary>Converts a Gregorian Date of type <c>System.DateTime</c> class to Persian Date.</summary>
            <param name="Date">DateTime to evaluate</param>
            <returns>string representation of Jalali Date</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.ToPersianDate(System.String,System.TimeSpan)">
            <summary>
            Converts a Gregorian Date of type <c>String</c> and a <c>TimeSpan</c> into a Persian Date.
            </summary>
            <param name="date"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.ToPersianDate(System.String)">
            <summary>
            Converts a Gregorian Date of type <c>String</c> class to Persian Date.
            </summary>
            <param name="date">Date to evaluate</param>
            <returns>string representation of Jalali Date.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.ToGregorianDateTime(System.String)">
            <summary>
            Converts a Persian Date of type <c>String</c> to Gregorian Date of type <c>DateTime</c> class.
            </summary>
            <param name="date">Date to evaluate</param>
            <returns>Gregorian DateTime representation of evaluated Jalali Date.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.ToGregorianDate(FarsiLibrary.Utils.PersianDate)">
            <summary>
            Converts a Persian Date of type <c>String</c> to Gregorian Date of type <c>String</c>.
            </summary>
            <param name="date"></param>
            <returns>Gregorian DateTime representation in string format of evaluated Jalali Date.</returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.toDouble(System.Int32)">
            <summary>
            Adds to single day or months a preceding zero
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.DayOfWeek(System.DateTime)">
            <summary>
            Gets Persian Weekday name from specified Gregorian Date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.PersianDateConverter.MonthDays(System.Int32)">
            <summary>
            Returns number of days in specified month number.
            </summary>
            <param name="MonthNo">Month no to evaluate in integer</param>
            <returns>number of days in the evaluated month</returns>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDateConverter.GDayTable">
            <summary>
            Array of Day Table for Gregorian Days.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDateConverter.JDayTable">
            <summary>
            Array of Day Table for Jalali Days.
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.PersianDateConverter.WeekDaysAbbr">
            <summary>
            Array of WeekDay names for Persian Weekdays. This array is a collection of abbreviated weekday names. The abbreviation name is just the first character of normal weekday names.
            </summary>
        </member>
        <member name="T:FarsiLibrary.Utils.toFarsi">
            <summary>
            Helper class to convert numbers to it's farsi equivalent. Use this class' methods to overcome a problem in displaying farsi numeric values.
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.toFarsi.Convert(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a number in string format e.g. 14500 to its localized version, if <c>Localized</c> value is set to <c>true</c>.
            </summary>
            <param name="EnglishNumber"></param>
            <param name="Localized"></param>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.toFarsi.Convert(System.String)">
            <summary>
            Converts an English number to it's Farsi value.
            </summary>
            <remarks>This method only converts the numbers in a string, and does not convert any non-numeric characters.</remarks>
            <param name="EnglishNumber"></param>
            <returns></returns>
        </member>
        <member name="T:FarsiLibrary.Utils.ToWords">
            <summary>
            Classes to convert a number to its persian written form. It accepts both an Integer or Long as input parameter.
            </summary>
            <exception>Thrown when input number is larger than 999999999999</exception>
            <example>
            An example on how to convert a Integer number to words.
            <code>
            	class MyClass 
                {
            	   public static void Main() 
                   {
            	      Console.WriteLine(FarsiLibrary.Utils.ToWords.ToString(1452));
            	   }
            	}
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:FarsiLibrary.Utils.ToWords.ToString(System.Int32)">
            <overloads>Has two overloads.</overloads>
            <summary>Converts an integer number to its written form in Persian</summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:FarsiLibrary.Utils.ToWords.ToString(System.Int64)">
            <summary>Converts a long number to its written form in Persian</summary>
            <param name="x"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:FarsiLibrary.Utils.toEnglish">
            <summary>
            Helper class to convert numbers to it's farsi equivalent. Use this class' methods to overcome a problem in displaying farsi numeric values.
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.toEnglish.Convert(System.String)">
            <summary>
            Converts a Farsi number to it's English numeric values.
            </summary>
            <remarks>This method only converts the numbers in a string, and does not convert any non-numeric characters.</remarks>
            <param name="FarsiNumber"></param>
            <returns></returns>
        </member>
        <member name="T:FarsiLibrary.Utils.Helpers.WeakList">
            <summary>
            A list implementation where the contained items may be garbage collected. When an item is garbage collected 
            its entry will be removed from WeakList.
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakList.RemoveAt(System.Int32)">
            <summary>
            implemtentation of IList.RemoveAt
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakList.Insert(System.Int32,System.Object)">
            <summary>
            implemtentation of IList.Insert
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakList.Remove(System.Object)">
            <summary>
            implemtentation of IList.Remove
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakList.Contains(System.Object)">
            <summary>
            implemtentation of IList.Contains
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakList.Clear">
            <summary>
            implemtentation of IList.Clear
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakList.IndexOf(System.Object)">
            <summary>
            implemtentation of IList.IndexOf
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakList.Add(System.Object)">
            <summary>
            implemtentation of IList.Add
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakList.CopyTo(System.Array,System.Int32)">
            <summary>
            implemtentation of IList.CopyTo
            </summary>
        </member>
        <member name="M:FarsiLibrary.Utils.Helpers.WeakList.GetEnumerator">
            <summary>
            implemtentation of IList.GetEnumerator
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakList.IsReadOnly">
            <summary>
            implemtentation of IList.IsReadOnly
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakList.Item(System.Int32)">
            <summary>
            implemtentation of IList indexer
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakList.IsFixedSize">
            <summary>
            implemtentation of IList.IsFixedSize
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakList.IsSynchronized">
            <summary>
            implemtentation of IList.IsSynchronized
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakList.Count">
            <summary>
            implemtentation of IList.Count
            </summary>
        </member>
        <member name="P:FarsiLibrary.Utils.Helpers.WeakList.SyncRoot">
            <summary>
            implemtentation of IList.SyncRoot
            </summary>
        </member>
    </members>
</doc>
